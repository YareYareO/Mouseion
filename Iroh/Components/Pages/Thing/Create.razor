@page "/thing/edit/{AppString}"
@page "/thing/edit/{AppString}/{Id:int}"
@inject IThingService ThingService
@inject NavigationManager NavigationManager
@inject ISearchThingService SearchThingService
@inject ITagService TagService
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<p>User ID: @userId</p>
@if(Id is null)
{   // Page Headline
    <PageTitle>Create new Thing</PageTitle>
    <h1>Create new Thing</h1>
}
else
{
    <PageTitle>Edit @CurrentThing.Name</PageTitle>
    <h1>Edit @CurrentThing.Name</h1>
}
<br/>
@if (tags != null && chosen != null)
{   // Display all Tags to choose from
    @for (int i = 0; i < tags.Count; i++)
    {
        var index = i;
        <label class="btn">
            <input type="checkbox" @bind-value="chosen[index]" /> @tags[i].Name
        </label>
    }
}

<EditForm Model="CurrentThing" OnSubmit="HandleSubmit">
    <!--Input for the Thing. Submit button at the end.-->
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="CurrentThing.Name" class="form-control"/>
    </div>
    <div>
        <label for="desc">Description</label>
        <InputText id="desc" @bind-Value="CurrentThing.Description" class="form-control" />
    </div>
    
    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    [Parameter]
    public string AppString { get; set; }

    public Thing CurrentThing { get; set; } = new();
    private List<Tag>? tags;
    private bool[]? chosen;
    private string userId;
    private UsedInApp App;


    protected override async Task OnInitializedAsync()
    {
        App = TagService.GetEnumByString(AppString);

        TagFamily[] families = TagService.GetTagFamilies(App);
        tags = await SearchThingService.GetTagsByFamilies(families);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        chosen = new bool[tags.Count];

        userId = "unknown";
        if (user.Identity != null & user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }        
        try
        {
            if (Id is not null)
            {
                var thing = await ThingService.FindAsync((int)Id);
                CurrentThing = thing;
            }
        }
        catch(Exception)
        {
            throw;
        }
    }

    async Task HandleSubmit()
    {
        //Prepare List of tag ids to make descriptions
        List<int> chosenTagIds = new List<int>();
        for(int i = 0; i < chosen.Length; i++)
        {
            if (chosen[i])
            {
                chosenTagIds.Add(tags[i].Id);
            }
        }
        CurrentThing.Creator = userId;
        CurrentThing.App = App;
        // Update
        if(Id is not null)
        {
            await ThingService.UpdateAsync(CurrentThing, (int)Id);
            await ThingService.UpdateDescriptions(chosenTagIds, (int)Id);
            NavigationManager.NavigateTo($"/Account/Manage/UserThings");
            return;
        }
        // Create New
        CurrentThing.Upvotes = 0;
        int thingId = await ThingService.CreateAsync(CurrentThing);
        await ThingService.UpdateDescriptions(chosenTagIds, thingId);
        NavigationManager.NavigateTo($"/search/{AppString}");
        return;
    }
}
