@page "/thing/edit/{AppString}"
@inject IThingService ThingService
@inject NavigationManager NavigationManager
@inject ISearchThingService SearchThingService
@inject ITagService TagService
@rendermode InteractiveServer

<PageTitle>Create new Thing</PageTitle>

<form class="terminal-form">
    <fieldset>
        <legend>Create new @App.ToString()</legend>
        @if (tags != null && chosen != null)
        {   // Display all Tags to choose from
            @for (int i = 0; i < tags.Count; i++)
            {
                var index = i;
                <label class="btn">
                    <input type="checkbox" @bind="chosen[index]" /> @tags[i].Name
                </label>
            }
        }

        <EditForm Model="CurrentThing" OnSubmit="HandleSubmit" Context="edit_context">
            <div class="form-group">
                <label for="name">Name</label>
                <InputText id="name" @bind-Value="CurrentThing.Name" class="form-control" />
            </div>
            <div class="form-group">
                <label for="desc">Description</label>
                <InputText id="desc" @bind-Value="CurrentThing.Description" class="form-control" />
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>    
        </EditForm>

    </fieldset>
</form>

@code {
    [Parameter]
    public string? AppString { get; set; }

    public Thing CurrentThing { get; set; } = new();
    private List<Tag> tags = new List<Tag>(0);
    private bool[] chosen = new bool[0];
    private Subject App;


    protected override async Task OnInitializedAsync()
    {
        if(AppString != null)
        {
            App = TagService.GetEnumByString(AppString);    
        }

        TagFamily[] families = TagService.GetTagFamilies(App);
        tags = await SearchThingService.GetTagsByFamilies(families);

        chosen = new bool[tags.Count];
        
    }

    async Task HandleSubmit()
    {
        if(tags.Count() == 0)
        {
            return;
        }
        //Prepare List of tag ids to make descriptions
        List<int> chosenTagIds = new List<int>();
        for(int i = 0; i < chosen.Length; i++)
        {
            if (chosen[i])
            {
                chosenTagIds.Add(tags[i].Id);
            }
        }
        CurrentThing.Creator = "me lol";
        CurrentThing.App = App;
        // Create New
        CurrentThing.Upvotes = 0;
        int thingId = await ThingService.CreateAsync(CurrentThing);
        await ThingService.UpdateDescriptions(chosenTagIds, thingId);
        NavigationManager.NavigateTo($"/search/{AppString}");
        return;
    }
    bool[] GetChosenTags(int thingid)
    {
        bool[] ret = new bool[tags.Count];

        try
        {
            List<string> thingsTags = TagService.GetTagsByThing(thingid).Select(t => t.Name).ToList();
            List<string> tagNames = tags.Select(t => t.Name).ToList();

            for (int i = 0; i < ret.Length; i++)
            {
                if (thingsTags.Contains(tagNames[i]))
                {
                    ret[i] = true;
                }
            }
        }
        catch
        {
            ret = new bool[tags.Count];
        }
        return ret;
    }
}
