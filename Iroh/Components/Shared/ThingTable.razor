@inject IUpvoteService UpvoteService
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

@rendermode @(new InteractiveServerRenderMode(prerender: false))

@if (Things == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered m-2">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Description</th>
                <th scope="col">Upvotes</th>
                <AuthorizeView>
                    <Authorized>
                        <th scope="col">Upvote</th>
                    </Authorized>
                </AuthorizeView>

            </tr>
        </thead>
        <tbody class="table-group-divider">
            @foreach (var thing in Things)
            {
                <tr>
                    <td scope="col">@thing.Name</td>
                    <td scope="col">@thing.Description</td>
                    <td scope="col">@thing.Upvotes</td>
                    <AuthorizeView>
                        <Authorized>
                            <td><button class="btn btn-info" @onclick="@(() => UpvoteThing(thing.Id, userId))">Vote</button></td>
                        </Authorized>
                    </AuthorizeView>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // for displaying things
    [Parameter]
    public List<Thing> Things { get; set; }
    // for upvote functionalities
    private string userId;

    protected override async Task OnInitializedAsync()
    {
        Things = new List<Thing>
        {
            new Thing(name: "A", description: "AAAAAAAAAAAAAA", UsedInApp.Person),
            new Thing(name: "B", description: "BBBBBBBBBBBBBB", UsedInApp.Person),
            new Thing(name: "C", description: "CCCCCCCCCCCCCC", UsedInApp.Person),
            new Thing(name: "D", description: "DDDDDDDDDDDDDD", UsedInApp.Person),
        };
        // for upvote functionalities
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = "unknown";
        if (user.Identity != null & user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
    }
    private async Task UpvoteThing(int thingid, string userid)
    {
        var thing = Things.FirstOrDefault(t => t.Id == thingid);
        if (thing == null) return;

        // nutze helper der ein bool zurückgibt wenn true, thing.Upvotes++ und erstelle ein Upvote Objekt (in einem Helper)
        bool doesExist = await UpvoteService.DoesUpvoteExistAlready(thingid, userid);
        bool successfullProcess = false;
        if (doesExist)
        {
            successfullProcess = await UpvoteService.RemoveUpvote(thingid, userid);
        }
        else
        {
            successfullProcess = await UpvoteService.CreateUpvote(thingid, userid);
        }
    }
}
