@inject ISearchThingService SearchThingService
@inject NavigationManager NavigationManager
@using System.Linq
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<br />
@if(tags != null && chosen != null)
{
    @for (int i = 0; i < tags.Count; i++)
    {
        var index = i;
        <label class="btn">
            <input type="checkbox" @bind="chosen[index]" /> @tags[i].Name
        </label>
    }
}
<br />
<InputRadioGroup @bind-Value="sortBy">
    <label class="btn">
        <InputRadio Value="@sortOptions[0]"/> @sortOptions[0]
    </label>
    <label class="btn">
        <InputRadio Value="@sortOptions[1]"/> @sortOptions[1]
    </label>
</InputRadioGroup>

<button @onclick="@(() => StartSearch())">Search</button>
    
@if (things == null)
{
    <p><em>Loading...</em></p>
}else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>CreatedAt</th>
                <th>Upvotes</th>
                <th>App</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var thing in things)
            {
                <tr>
                    <td>@thing.Name</td>
                    <td>@thing.Description</td>
                    <td>@thing.CreatedAt.ToString()</td>
                    <td>@thing.Upvotes.ToString()</td>
                    <td>@thing.App.ToString()</td>
                    <td><button class="btn btn-primary" @onclick="@(() => EditThing(thing.Id, thing.App))">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public UsedInApp app { get; set; }
    private List<Thing>? things;
    private List<Tag>? tags;
    private bool[]? chosen;
    private string[] sortOptions = ["Upvotes", "New"];
    private string? sortBy;

    protected override async Task OnInitializedAsync()
    {
        tags = await SearchThingService.GetAllTags(app);
        chosen = new bool[tags.Count];
        sortBy = sortOptions[0];
        await StartSearch();
    }
    private void EditThing(int id, UsedInApp app)
    {
        string used = "FALSE";
        if(app == UsedInApp.History)
        {
            used = "true";
        }
        NavigationManager.NavigateTo($"/thing/edit/{used}/{id}");
    }
    private async Task StartSearch()
    {
        List<int> chosenTagIds = new List<int>();
        if(!chosen.All(tag => !tag))
        {
            Tag[] chosenTags = tags.Where((tag, index) => chosen[index]).ToArray();
            chosenTagIds = chosenTags.Select(tag => tag.Id).ToList();
        }
        else
        {
            chosenTagIds.Add(tags[0].Id);
        }
        things = await SearchThingService.GetThingsByTags(chosenTagIds, sortBy: sortBy, app: app);
    }

}
