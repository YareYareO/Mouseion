@using System.Diagnostics
@inject ISearchThingService SearchThingService
@inject ITagService TagService
@inject NavigationManager NavigationManager

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="terminal-form">
    <fieldset>
        <legend>Select Tags</legend>

        <!-- Tag functionalities -->
        @if (tags != null && chosen != null)
        {
            var groupedTags = tags.GroupBy(tag => tag.Family)
                                .OrderBy(group => group.Key); // Sortiere nach Enum-Wert der Familie

            @foreach (var group in groupedTags)
            {
                <div role="group" aria-label="checkboxgroup" class="form-group terminal-checkbox-group">
                    <label class="checkbox-group-name">@group.Key</label>

                    @for (int i = 0; i < group.Count(); i++)
                    {
                        var tag = group.ElementAt(i);
                        var index = tags.IndexOf(tag);  // Um den richtigen Index von "chosen" zu behalten

                        string btnid = "btncheck" + tag.Name;
                        <div>
                            <input type="checkbox" class="" id="@btnid" autocomplete="off" @bind="chosen[index]">
                            <label class="" for="@btnid">@tag.Name</label>
                        </div>
                    }
                </div>
            }
        }
        <br />
        <!-- Sorting -->
        @* <InputRadioGroup @bind-Value="sortBy">
            <div class="form-check form-check-inline ms-2">
                <InputRadio Value="@sortOptions[0]" class="form-check-input" id="SortByUpvotes"/> 
                <label class="form-check-label" for="SortByUpvotes">@sortOptions[0]</label>
            </div>

            <div class="form-check form-check-inline">
                <InputRadio Value="@sortOptions[1]" class="form-check-input" id="SortByNew" />
                <label class="form-check-label" for="SortByNew">@sortOptions[1]</label>
            </div>
        </InputRadioGroup> *@
        <div class="form-group">
            <button class="btn btn-primary" @onclick="@(SearchButtonPressed)">Search</button>
        </div>
    </fieldset>
</div>
@if (isPopupVisible)
{
    <label class="ms-3" style="color:white">Found nothing!</label>
}
<!-- Displaying Things -->

<Iroh.Components.Shared.ThingTable Things=@things />



<!-- Pagination-->
<nav class="terminal-pagination" aria-label="Page navigation">
    <ul class="pagination">
        <li class="page-item">
            <button class="page-link" @onclick="@(() => ChangePage(-1))">
                <span aria-hidden="true">&laquo;</span>
            </button>
        </li>
        <li class="page-item"><label class="page-link">@currentPage</label></li>
        <li class="page-item">
            <button class="page-link" @onclick="@(() => ChangePage(1))">
                <span aria-hidden="true">&raquo;</span>
            </button>
        </li>
    </ul>
</nav>
@code {
    [Parameter]
    public Subject currentSubject { get; set; }
    private List<Tag>? tags;
    private bool[]? chosen;
    //private string[] sortOptions = ["Upvotes", "New"];
    private string sortBy = "New";
    private int currentPage = 1;
    private bool isPopupVisible = false;
    private List<Thing>? things;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("ONINITIALIZED");
        TagFamily[] families = TagService.GetTagFamilies(currentSubject);
        tags = await SearchThingService.GetTagsByFamilies(families);
        chosen = new bool[tags.Count];
        currentPage = 1;
        isPopupVisible = false;
    }
    private async Task SearchButtonPressed()
    {
        this.currentPage = 1;
        await HandleSearch();
    }
    private async Task<bool> HandleSearch()
    {
        List<Thing> foundThings = await SearchThings();
        if (foundThings.Any())
        {
            this.things = foundThings;
            return true;
        }else{
            FoundNothingPopup();
            return false;
        }
    }
    private async Task<List<Thing>> SearchThings()
    {   
        if((chosen == null) | (tags == null))
        {
            return things;
        }
        List<Thing> foundthings;
        if (chosen.Any(tag => tag))
        {
            List<int> chosenTagIds = tags.Where((tag, index) => chosen[index]).Select(tag => tag.Id).ToList();
            foundthings = await SearchThingService.GetThingsByTags(chosenTagIds, sortBy: this.sortBy, subject: this.currentSubject, currentPage: this.currentPage);
        }else{
            foundthings = await SearchThingService.GetThingsNoTags(sortBy: this.sortBy, subject: this.currentSubject, currentPage: this.currentPage);
        }
        return foundthings;
    }
    private async Task ChangePage(int changeRate)
    {
        this.currentPage += changeRate;
        if(this.currentPage < 1)
        {
            this.currentPage = 1;
        }
        bool isNextPageEmpty = !(await HandleSearch());
        if(isNextPageEmpty)
        {
            this.currentPage -= changeRate;
        }
    }
    private async void FoundNothingPopup()
    {
        isPopupVisible = true;
        StateHasChanged(); // UI sofort aktualisieren
        await Task.Delay(2000); // 3 Sekunden warten
        isPopupVisible = false;
        StateHasChanged(); // Popup ausblenden
    }
}
