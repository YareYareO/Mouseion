@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IUpvoteService UpvoteService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false))


<h3>Book</h3>
<button onclick="onThingsChanged()">Hi</button>
<div class="bookstand">
    <input type="checkbox" id="checkbox-cover" class="bookcheckbox">
    
    <div class="book">
        <div class="cover">
            <label for="checkbox-cover"></label>
        </div>

        @if(Things != null)
        {
            int count = 0;
            @foreach (var thing in Things)
            {
                string checkboxid = "checkbox-page" + count;

                <div class="page" data-page-number="@count">
                    <input type="checkbox" class="bookcheckbox" id="@checkboxid" data-check-number="@count">
                    <label for="@checkboxid" class="front-page next">
                        <div class="front-page">
                            <h2>@thing.Name</h2>
                            <p>@thing.Description</p>
                            <p>@thing.Upvotes</p>
                            <AuthorizeView>
                                <Authorized>
                                    <p><button class="btn btn-info" @onclick="@(() => UpvoteThing(thing.Id, userId))">Vote</button></p>
                                </Authorized>
                            </AuthorizeView>
                        </div>
                    </label>
                    <label for="@checkboxid" class="back-page prev">
                        <div>
                        </div>
                    </label>
                </div>
                count = count + 1;
            }   
        }
        
        <div class="back-cover "></div>
    </div>
</div>
<link rel="stylesheet" href="../Components/Shared/ThingBook.razor.css" />
<script src="../Components/Shared/ThingBook.razor.js"></script>
@code {
    [Parameter]
    public List<Thing> Things { get; set; }
    private string userId;
    protected override async Task OnInitializedAsync()
    {
        Things = new List<Thing>
        {
            new Thing(name: "A", description: "AAAAAAAAAAAAAA", UsedInApp.Person),
            new Thing(name: "B", description: "BBBBBBBBBBBBBB", UsedInApp.Person),
            new Thing(name: "C", description: "CCCCCCCCCCCCCC", UsedInApp.Person),
            new Thing(name: "D", description: "DDDDDDDDDDDDDD", UsedInApp.Person),
        };
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = "unknown";
        if (user.Identity != null & user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
        }
    }
    private async Task UpvoteThing(int thingid, string userid)
    {
        var thing = Things.FirstOrDefault(t => t.Id == thingid);
        if (thing == null) return;

        // nutze helper der ein bool zurückgibt wenn true, thing.Upvotes++ und erstelle ein Upvote Objekt (in einem Helper)
        bool doesExist = await UpvoteService.DoesUpvoteExistAlready(thingid, userid);
        bool successfullProcess = false;
        if (doesExist)
        {
            successfullProcess = await UpvoteService.RemoveUpvote(thingid, userid);
        }
        else
        {
            successfullProcess = await UpvoteService.CreateUpvote(thingid, userid);
        }
    }
}
